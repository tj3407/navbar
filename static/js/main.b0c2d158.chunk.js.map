{"version":3,"sources":["components/header/Header.js","components/navbar/Navbar.js","App.js","serviceWorker.js","index.js"],"names":["Header","Navbar","props","React","useState","target","setTarget","links","setLinks","useEffect","document","querySelector","items","querySelectorAll","childNodes","handleClick","e","preventDefault","parentNode","nodes","Array","from","classList","contains","i","length","remove","add","width","getBoundingClientRect","height","left","top","style","borderColor","transform","paddingTop","className","map","item","key","section","href","onClick","tabIndex","label","navbarLinks","require","App","setItems","cities","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"gnBAEe,SAASA,IACpB,OACI,6BACI,uC,MCFG,SAASC,EAAOC,GAAQ,IAAD,EACRC,IAAMC,SAAS,IADP,mBAC7BC,EAD6B,KACrBC,EADqB,OAEVH,IAAMC,SAAS,IAFL,mBAE7BG,EAF6B,KAEtBC,EAFsB,KAKpCL,IAAMM,WAAU,WACdH,EAAUI,SAASC,cAAc,mBACjC,IAAIC,EAAQF,SAASG,iBAAiB,iBACtCL,EAASI,EAAM,GAAGE,cACjB,IAEH,IAAMC,EAAc,SAAAC,GAClBA,EAAEC,iBACF,IAAMC,EAAaF,EAAEX,OAAOa,WACxBC,EAAQC,MAAMC,KAAKd,GAEvB,IAAKW,EAAWI,UAAUC,SAAS,UAAW,CAC5C,IAAK,IAAIC,EAAI,EAAGA,EAAIL,EAAMM,OAAQD,IAC5BL,EAAMK,GAAGF,UAAUC,SAAS,WAC9BJ,EAAMK,GAAGF,UAAUI,OAAO,UAI9BR,EAAWI,UAAUK,IAAI,UAGzB,IAAMC,EAAQZ,EAAEX,OAAOwB,wBAAwBD,MACzCE,EAASd,EAAEX,OAAOwB,wBAAwBC,OAAS,GACnDC,EAAOf,EAAEX,OAAOwB,wBAAwBE,KACxCC,EAAMhB,EAAEX,OAAOwB,wBAAwBG,IAI7C3B,EAAO4B,MAAML,MAAb,UAAwBA,EAAxB,MACAvB,EAAO4B,MAAMH,OAAb,UAAyBA,EAAzB,MACAzB,EAAO4B,MAAMF,KAAb,UAAuBA,EAAvB,MACA1B,EAAO4B,MAAMD,IAAb,UAAsBA,EAAtB,MACA3B,EAAO4B,MAAMC,YAPC,QAQd7B,EAAO4B,MAAME,UAAY,OACzB9B,EAAO4B,MAAMG,WAAa,SAI9B,OACE,yBAAKC,UAAU,UACb,yBAAKA,UAAU,aACb,4BACGnC,EAAMU,MAAM0B,KAAI,SAAAC,GACf,OACE,wBAAIC,IAAKD,EAAKE,SACZ,uBAAGC,KAAK,IAAIC,QAAS5B,EAAa6B,SAAU,GACzCL,EAAKM,aAOlB,0BAAMR,UAAU,kBAChB,yBAAKA,UAAU,0B,UCzDjBS,EAAcC,EAAQ,IAiBXC,MAff,WAAgB,IAAD,EACa7C,IAAMC,SAAS,IAD5B,mBACNQ,EADM,KACCqC,EADD,KAOb,OAJA9C,IAAMM,WAAU,WACdwC,EAASH,EAAYI,UACpB,IAGD,yBAAKb,UAAU,OACb,kBAACrC,EAAD,MACA,kBAACC,EAAD,CAAQW,MAAOA,MCLDuC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAAS/C,SAASgD,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.b0c2d158.chunk.js","sourcesContent":["import React from 'react'\n\nexport default function Header() {\n    return (\n        <div>\n            <h1>Cities</h1>\n        </div>\n    )\n}\n","import React from \"react\";\nimport \"./stylesheet/navbar.css\";\n\nexport default function Navbar(props) {\n  const [target, setTarget] = React.useState({});\n  const [links, setLinks] = React.useState({});\n\n  // Retrieve the node element for the bottom border and nodes of the navbar links\n  React.useEffect(() => {\n    setTarget(document.querySelector(\".bottom-border\"));\n    let items = document.querySelectorAll(\".nav-items ul\");\n    setLinks(items[0].childNodes);\n  }, []);\n\n  const handleClick = e => {\n    e.preventDefault();\n    const parentNode = e.target.parentNode;\n    let nodes = Array.from(links);\n\n    if (!parentNode.classList.contains(\"active\")) {\n      for (let i = 0; i < nodes.length; i++) {\n        if (nodes[i].classList.contains(\"active\")) {\n          nodes[i].classList.remove(\"active\");\n        }\n      }\n      // add active class to clicked element\n      parentNode.classList.add(\"active\");\n\n      // calculate position of clicked element\n      const width = e.target.getBoundingClientRect().width;\n      const height = e.target.getBoundingClientRect().height + 0.5;\n      const left = e.target.getBoundingClientRect().left;\n      const top = e.target.getBoundingClientRect().top;\n      const color = \"black\";\n\n      // add style to the bottom border for the sliding effect\n      target.style.width = `${width}px`;\n      target.style.height = `${height}px`;\n      target.style.left = `${left}px`;\n      target.style.top = `${top}px`;\n      target.style.borderColor = color;\n      target.style.transform = \"none\";\n      target.style.paddingTop = \"10px\";\n    }\n  };\n\n  return (\n    <div className=\"navbar\">\n      <nav className=\"nav-items\">\n        <ul>\n          {props.items.map(item => {\n            return (\n              <li key={item.section}>\n                <a href=\"/\" onClick={handleClick} tabIndex={0}>\n                  {item.label}\n                </a>\n              </li>\n            );\n          })}\n        </ul>\n      </nav>\n      <span className=\"bottom-border\" />\n      <div className=\"bottom-border-second\" />\n    </div>\n  );\n}\n","import React from \"react\";\nimport Header from \"./components/header/Header\";\nimport Navbar from \"./components/navbar/Navbar\";\nimport \"./App.css\";\n\nvar navbarLinks = require(\"./metadata/navigation.json\");\n\nfunction App() {\n  const [items, setItems] = React.useState([]);\n\n  React.useEffect(() => {\n    setItems(navbarLinks.cities);\n  }, [])\n\n  return (\n    <div className=\"App\">\n      <Header />\n      <Navbar items={items} />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}